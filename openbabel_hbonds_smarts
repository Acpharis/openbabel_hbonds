#!/usr/bin/env python2.7
#
# Copyright 2014 Acpharis Inc
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation version 2
# of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
import pybel
import openbabel
import argparse
import math

import pprint
pp = pprint.PrettyPrinter(indent=4)


donor_smarts = (
    '[#7,#8][#1]',
)

acceptor_smarts = (
    'O',
    '[#7^3;!+]',
    '[#7;X2,X1]',
)

parser = argparse.ArgumentParser(description='Detect Hydrogen Bonds Using OpenBabel')
parser.add_argument("pdb", help="pdb file")

args = parser.parse_args()


mol = pybel.readfile("pdb", args.pdb).next()

mol.OBMol.AddHydrogens(False, True)

#mol.write('pdb', '%s_with_hydrogens.pdb' %(args.pdb) )

donor_indices = []
acceptor_indices = []

for smarts_def in donor_smarts:
    smarts = pybel.Smarts(smarts_def)
    for match in smarts.findall(mol):
        donor_indices.append(match)

for smarts_def in acceptor_smarts:
    smarts = pybel.Smarts(smarts_def)
    for match in smarts.findall(mol):
        acceptor_indices.append(match)


hetatom_donors = []
hetatom_acceptors = []

protein_donors = []
protein_acceptors = []

for donor in donor_indices:
    atom = mol.OBMol.GetAtom(donor[0])
    if atom.GetResidue().IsHetAtom(atom):
        if atom.GetResidue().GetName() not in ('HOH', 'SO4'): #get rid of waters
            hetatom_donors.append(donor)
    else:
        protein_donors.append(donor)

for acceptor in acceptor_indices:
    atom = mol.OBMol.GetAtom(acceptor[0])
    if atom.GetResidue().IsHetAtom(atom):
        if atom.GetResidue().GetName() not in ('HOH', 'SO4'): #get rid of waters
            hetatom_acceptors.append(acceptor)
    else:
        protein_acceptors.append(acceptor)


#first filter on D-A distance of 3.9A
DA_dist = 3.9
DA_dist_sq = DA_dist*DA_dist
pot_donor_acceptor_DA = []

for donor in protein_donors:
    D_atom = mol.OBMol.GetAtom(donor[0])
    for acceptor in hetatom_acceptors:
        A_atom = mol.OBMol.GetAtom(acceptor[0])

        dx = D_atom.x() - A_atom.x()
        dy = D_atom.y() - A_atom.y()
        dz = D_atom.z() - A_atom.z()

        d_sq = dx*dx + dy*dy + dz*dz

        if d_sq < DA_dist_sq:
            pot_donor_acceptor_DA.append( (donor, acceptor) )

for donor in hetatom_donors:
    D_atom = mol.OBMol.GetAtom(donor[0])
    for acceptor in protein_acceptors:
        A_atom = mol.OBMol.GetAtom(acceptor[0])

        dx = D_atom.x() - A_atom.x()
        dy = D_atom.y() - A_atom.y()
        dz = D_atom.z() - A_atom.z()

        d_sq = dx*dx + dy*dy + dz*dz

        if d_sq < DA_dist_sq:
            pot_donor_acceptor_DA.append( (donor, acceptor) )


HA_dist = 2.5
HA_dist_sq = HA_dist*HA_dist

D_H_A_min = 90.0
D_A_AA_min = 90.0
H_A_AA_min = 90.0

hbonds = []


def acceptable_hbond(D_atom, A_atom, H_atom):
    dx = H_atom.x() - A_atom.x()
    dy = H_atom.y() - A_atom.y()
    dz = H_atom.z() - A_atom.z()

    d_sq = dx*dx + dy*dy + dz*dz
    if d_sq > HA_dist_sq:
        return False

    D_H_A_angle = D_atom.GetAngle(H_atom, A_atom);

    if D_H_A_angle < D_H_A_min:
        return False

    #there often will be more than one AA, see if any meet the D_A_AA_min/H_A_AA_min qualifications
    AAs = []
    for neighbor in openbabel.OBAtomAtomIter(A_atom):
        if not neighbor.IsHydrogen():
            AAs.append(neighbor)

    for AA_atom in AAs:
        D_A_AA_angle = D_atom.GetAngle(A_atom, AA_atom)
        if D_A_AA_angle < D_A_AA_min:
            continue
        H_A_AA_angle = H_atom.GetAngle(A_atom, AA_atom)
        if H_A_AA_angle < H_A_AA_min:
            continue

        return True

    return False

#classify donors based on hybridization, DD count, and hydrogens
#sp2 1H 2DD  fixed
#sp2 1H 1DD  flippable e.g. DD-D-H = 110, 250 (e.g. -110)
#sp2 2H 1DD  fixed
#sp3 1H 1DD  spin at constant angle e.g. DD-D-H = 110
#sp3 3H 1DD  fixed
for pair in pot_donor_acceptor_DA:
    (donor, acceptor) = pair
    D_atom = mol.OBMol.GetAtom(donor[0])
    hybridization = D_atom.GetHyb()
    Hs = D_atom.ExplicitHydrogenCount()
    nbonds = len(list(openbabel.OBAtomBondIter(D_atom)))
    DDs = nbonds -Hs
    #print hybridization, Hs, DDs, D_atom.GetResidue().GetName(), D_atom.GetResidue().GetAtomID(D_atom), D_atom.GetResidue().GetNumString()

    A_atom = mol.OBMol.GetAtom(acceptor[0])
    H_atom = mol.OBMol.GetAtom(donor[1])
    if ( (hybridization == 2 and ((Hs==2 and DDs==1) or (Hs==1 and DDs==2)))
      or (hybridization == 3 and  (Hs==3 and DDs==1))  ): #fixed
        if acceptable_hbond(D_atom, A_atom, H_atom):
            hbonds.append( pair)
    elif hybridization == 2 and Hs==1 and DDs==1: #flippable
        if acceptable_hbond(D_atom, A_atom, H_atom):
            hbonds.append( pair)
        else:
            for neighbor in openbabel.OBAtomAtomIter(D_atom):
                if not neighbor.IsHydrogen():
                    DD_atom = neighbor
                    break
            for neighbor in openbabel.OBAtomAtomIter(DD_atom):
                if neighbor.GetIndex() != D_atom.GetIndex():
                    DDD_atom = neighbor
                    break
            current_torsion =  mol.OBMol.GetTorsion(DDD_atom, DD_atom, D_atom, H_atom)
            new_torsion = current_torsion + 180.0
            new_torsion = math.radians(new_torsion) #convert to radians due to asymmetric api (gets in degrees, sets in radians)
            mol.OBMol.SetTorsion(DDD_atom, DD_atom, D_atom, H_atom, new_torsion)

            if acceptable_hbond(D_atom, A_atom, H_atom):
                hbonds.append(pair)

    elif hybridization == 3 and Hs==1 and DDs==1: #spinning
        for neighbor in openbabel.OBAtomAtomIter(D_atom):
            if not neighbor.IsHydrogen():
                DD_atom = neighbor
                break
        for neighbor in openbabel.OBAtomAtomIter(DD_atom):
            if neighbor.GetIndex() != D_atom.GetIndex():
                DDD_atom = neighbor
                break
        goal_torsion =  mol.OBMol.GetTorsion(DDD_atom, DD_atom, D_atom, A_atom)
        goal_torsion = math.radians(goal_torsion) #convert to radians due to asymmetric api (gets in degrees, sets in radians)
        mol.OBMol.SetTorsion(DDD_atom, DD_atom, D_atom, H_atom, goal_torsion)
        if acceptable_hbond(D_atom, A_atom, H_atom):
            hbonds.append( pair)

for pair in hbonds:
    (donor, acceptor) = pair

    D_atom = mol.OBMol.GetAtom(donor[0])
    A_atom = mol.OBMol.GetAtom(acceptor[0])
    print D_atom.GetResidue().GetChain(), D_atom.GetResidue().GetNumString(), D_atom.GetResidue().GetName(), D_atom.GetResidue().GetAtomID(D_atom),
    print A_atom.GetResidue().GetChain(), A_atom.GetResidue().GetNumString(), A_atom.GetResidue().GetName(), A_atom.GetResidue().GetAtomID(A_atom)
